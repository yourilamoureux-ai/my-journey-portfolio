---
import BlogPost from "./BlogPost.astro";
import Heading from "../ui/Heading.astro";
import { useTranslations } from '@/i18n/utils.ts';

// --- NEW I18N LOGIC ---
// 1. Get the current language from the URL.
const allLocales = ['en', 'fr', 'de', 'es'];
const pathname = Astro.url.pathname;
const firstSegment = pathname.split('/')[1];
const locale = allLocales.includes(firstSegment) ? firstSegment : 'en';

const t = useTranslations(locale);

// Prop to determine whether to exclude the latest post or a specific post
export interface Props {
  excludeLatest?: boolean;
  currentPostUrl?: string;
  all?: boolean;
}

const { excludeLatest = false, currentPostUrl = "", all = false } = Astro.props;

// Define the shape of a post object
interface BlogPost {
  url: string;
  file: string;
  frontmatter: {
    title: string;
    pubDate: string;
    tags: string[];
    languages: string[];
    image: {
        url: string;
        alt: string;
    };
  };
}

// 2. Fetch all blog posts from ALL language directories.
const postImports = import.meta.glob<BlogPost>("../../pages/**/blog/posts/*.md", { eager: true });
const allPostsGlob: BlogPost[] = Object.values(postImports);

// 3. Filter for posts that match the current language.
let postsToShow = allPostsGlob.filter((post: BlogPost) => {
  if (!post || !post.file) {
    return false;
  }
  if (locale === 'en') {
    return !allLocales.some(lang => lang !== 'en' && post.file.includes(`/pages/${lang}/`));
  }
  return post.file.includes(`/pages/${locale}/`);
});

// 4. THE FIX: Add a defensive filter to remove any null/invalid entries.
postsToShow = postsToShow.filter(post => post && post.url);

// --- END OF NEW I18N LOGIC ---


// Sort by date in descending order (newest first)
postsToShow.sort((a, b) => {
  const dateA = new Date(a.frontmatter.pubDate).getTime();
  const dateB = new Date(b.frontmatter.pubDate).getTime();
  return dateB - dateA;
});

// Filter posts according to props (this logic remains the same)
if (currentPostUrl) {
  // Exclude current post if its URL is provided
  postsToShow = postsToShow.filter((post) => {
    if (!post.url) return false;
    const normalizedPostUrl = post.url.replace(/\/$/, "");
    const normalizedCurrentUrl = currentPostUrl.replace(/\/$/, "");
    return normalizedPostUrl !== normalizedCurrentUrl;
  });
} else if (excludeLatest) {
  // If no specific URL but want to exclude the latest
  postsToShow = postsToShow.slice(1);
}

// Limit to 4 posts if all is false
if (!all) {
  postsToShow = postsToShow.slice(0, 4);
}
---

<section
  class="py-8 max-lg:px-4 max-md:px-8 max-sm:px-0 max-md:py-4 max-w-4xl mx-auto"
>
  {
    all && (
      <div class="flex gap-4 pb-6 items-center text-center justify-center">
        <Heading text="All" textGradient="Posts" level={2} />
      </div>
    )
  }

  <div class="flex flex-col gap-8 w-full mx-auto">
    {
      postsToShow.map((post) => (
        <BlogPost
          url={post.url}
          title={post.frontmatter.title}
          date={post.frontmatter.pubDate}
          tags={post.frontmatter.tags}
          languages={post.frontmatter.languages}
          image={post.frontmatter.image}
        />
      ))
    }
  </div>
  {
    !all && (
      <div id="morePosts" class="w-full flex justify-center text-center my-12">
        <a
          href="/blog/posts/"
          class="font-bold cursor-pointer text-mint-400 dark:text-mint-100 hover:text-mint-500 dark:hover:text-mint-300 transition-all"
        >
          View all posts...
        </a>
      </div>
    )
  }
</section>
