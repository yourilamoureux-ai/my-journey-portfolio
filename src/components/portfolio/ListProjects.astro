---
import Project from "./Project.astro";
import Heading from "../ui/Heading.astro";
import { Icon } from "astro-icon/components";
import { useTranslations } from '@/i18n/utils.ts';

// Supported locales
const allLocales = ['en', 'fr', 'de', 'es'];

// Detect current locale from URL
const pathname = Astro.url.pathname;
const firstSegment = pathname.split('/')[1];
const locale = allLocales.includes(firstSegment) ? firstSegment : 'en';

const t = useTranslations(locale);

interface ProjectPost {
  url?: string;
  file: string;
  frontmatter: {
    title: string;
    description: string;
    pubDate: string;
    languages: string[];
    image: {
      url: string;
      alt: string;
    };
  };
}

// Grab all project markdown files
const projectImports = import.meta.glob<ProjectPost>(
  "../../pages/**/portfolio/projects/*.md",
  { eager: true }
);

// Normalize & enrich posts with url + locale
let allPosts = Object.entries(projectImports).map(([file, post]) => {
  const normalizedPath = file.replace(/\\/g, "/");

  // derive locale from path
  const match = normalizedPath.match(/\/pages\/(fr|es|de)\//);
  const fileLocale = match ? match[1] : "en";

  // derive URL from file path (works for all langs)
  const derivedUrl = normalizedPath
    .replace(/^.*\/pages/, "")
    .replace(/\.md$/, "/");

  return {
    ...post,
    file: normalizedPath,
    locale: fileLocale,
    url: post.url ?? derivedUrl,
  };
});

// Filter for the current locale
allPosts = allPosts.filter((post) => post.locale === locale);

// Sort newest first
allPosts.sort(
  (a, b) =>
    new Date(b.frontmatter.pubDate).getTime() -
    new Date(a.frontmatter.pubDate).getTime()
);
---

<section
  class="bg-linear-to-t dark:from-[#0e0e10] from-white from-50% to-transparent to-100% scroll-m-16 relative pt-8 pb-32 max-2xl:px-8 max-md:pt-4"
  id="projects"
>
  <div class="mx-auto max-w-7xl py-8">
    <div class="flex gap-4 items-center justify-center text-center">
      <Icon class="text-3xl dark:text-white text-blacktext" name="code" />
      <Heading text={t('projects.heading')} textGradient={t('projects.subheading')} level={2} />
    </div>

    <p
      class="z-2 text-center mx-auto text-lg max-xl:text-base max-w-2xl dark:text-gray-200 text-blacktext my-6 leading-6 font-medium"
      set:html={t('projects.intro')}
    >
    </p>
    <slot />
  </div>

  <div
    id="containerProjects"
    class="mx-auto max-w-7xl grid grid-cols-3 max-lg:grid-cols-2 max-md:grid-cols-1 gap-5 p-2 py-4 max-h-[150vh] overflow-hidden transition-[max-height] duration-500 ease-in-out"
  >
    {
      allPosts.map((post) => (
        <Project
          url={post.url}
          title={post.frontmatter.title}
          description={post.frontmatter.description}
          languages={post.frontmatter.languages}
          image={post.frontmatter.image}
        />
      ))
    }
  </div>

  <div
    id="moreProjects"
    class="absolute bottom-0 left-0 w-full flex justify-center text-center bg-linear-to-t from-[#FBFEFD] dark:from-[#0e0e10] from-55% to-transparent to-100% pb-30 pt-52"
  >
    <button
      class="absolute font-bold cursor-pointer text-mint-400 dark:text-mint-100 hover:text-mint-500 dark:hover:text-mint-300 transition-all"
    >
      {t('projects.view_more_button')}
    </button>
  </div>
</section>

<script>
  document.querySelector("#moreProjects")?.addEventListener("click", () => {
    const container = document.querySelector("#containerProjects");
    const moreProjectsBtn = document.querySelector("#moreProjects");

    if (container && moreProjectsBtn) {
      container.classList.remove("max-h-[150vh]");
      container.classList.add("max-h-full");
      moreProjectsBtn.classList.add("opacity-0", "pointer-events-none");
    }
  });
</script>
